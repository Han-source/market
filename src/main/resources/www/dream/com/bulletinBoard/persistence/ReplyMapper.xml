<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Sql에 있는 Post Data를 가져 오기 위해서 -->
<!-- resultMap : DB Table 정의 내역과 객체 정의 내역에 있어 mismatch(부조화)가 있을 시 이를 연동,짝 
   지어주는 정보를 정의함 쉽게말하면 객체 만들어주려고 쓰는거, 만약 반환 Type이 확실하면 int, long resultType으로 
   값을 준다. -->


<mapper
   namespace="www.dream.com.bulletinBoard.persistence.ReplyMapper">
   <resultMap type="www.dream.com.bulletinBoard.model.ReplyVO"
      id="rmReply"
      extends="www.dream.com.common.persistence.CommonMngVOMapper.CommonMngVOMap">

      <id property="id" column="id"></id>
      <result property="content" column="content"></result>
      <result property="replyCnt" column="reply_cnt"></result>
      
      <association property="writer" columnPrefix="w_"
         resultMap="www.dream.com.party.persistence.PartyMapper.partyMap">
      </association>
      <!--  discriminator : 상속자, 판별자 -->
      <discriminator javaType="String" column="descrim">
         <case value="reply" resultMap="rmReply" />
         <case value="post" resultMap="rmPost" />
      </discriminator>
      <!-- Master-Detail(1:N) 구조에서 Detail이 Master를 함께 join으로 읽어서 객체를 만들때 association 
         tag 사용 -->
      <!--columnprefix = w_로 시작하는것들을 만나면 Matching 시켜라 -->
   </resultMap>
   
   <resultMap type="www.dream.com.bulletinBoard.model.PostVO" id="rmPost"   extends="rmReply">

      <result property="title" column="title"></result>
      <result property="title" column="title"></result>
      <result property="readCnt" column="read_cnt"></result>
      <result property="likeCnt" column="like_cnt"></result>
      <result property="dislikeCnt" column="dislike_cnt"></result>
      <collection property="board" columnPrefix="board_" 
         resultMap="www.dream.com.bulletinBoard.persistence.BoardMapper.boardMapper">
      </collection>
      <collection property="listAttach" columnPrefix="af_" 
         resultMap="www.dream.com.common.attachFile.persistence.AttachFileVOMapper.rmAttachFileVO">
      </collection>      
      <!-- Master-Detail(1:N) 구조에서 Detail이 Master를 함께 join으로 읽어서 객체를 만들때 association 
         tag 사용 -->
      <!--columnprefix = w_로 시작하는것들을 만나면 Matching 시켜라 -->
   </resultMap>
   
   <!--<resultMap type="www.dream.com.bulletinBoard.model.ReplyVO"
      id="rmReplyWithWriter"    extends="rmReply">
      </resultMap>
     -->
   <!-- ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆게시글 처리 함수 정의 영역☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆ -->
      <!-- public int cntPlus(PostVO post); -->
      <update id="cntPlus">
      UPDATE s_reply
         set read_cnt = read_cnt + 1
         where id = #{id}
      </update>
      
      <select id="checkLike" resultType="_int">
         select count(*)
         from s_likecheck
         where postid = #{id}
            and user_id = #{userId}
      </select>
      
      <delete id="deleteCheckLike">
         DELETE from s_likecheck
         where postid = #{id}
            and user_id = #{userId}
      </delete>
      
      <insert id="upcheckLike">
         insert into s_likecheck(postid, user_id, like_check)
         values(#{id}, #{userId}, 1)
      </insert>
      
      <update id="uplike">
      UPDATE s_reply
         set like_cnt = like_cnt + 1
         where id = #{id}
      </update>

      <update id="downlike">
      UPDATE s_reply
        set like_cnt = like_cnt - 1
        where id = #{id}
      </update>
      
      <select id="getLike" resultType="_int">
      select like_cnt
         from s_reply
         where id = #{id}
      </select>
      
      
      <sql id="searchCommon"> <!-- 분할 정복은 아주 가치있는 작업 -->
          s_hashtag h, sm_ht2StringId m, s_reply p
           where  h.id in (
             SELECT id <!-- 단어 계층구조를 활용한 검색 범위 확장 -->
                FROM s_hashtag
            START with hashtag in
           <foreach collection="cri.searchingHashtags" item="aWord"  open="(" separator="," close=")">
                 #{aWord}
           </foreach>
             CONNECT BY PRIOR id = super_id)      
           and h.id = m.hashtag_id
           and m.opponent_type = 'Post'
           and m.opponent_id = p.id
          and p.board_id = #{boardId}
          and p.child_board_id = #{child}
          
          
      </sql>

      <!-- public long  getTotalCount(@Param("boardId") int boardId, @Param("descrim") String descrim); -->
      <select id="getTotalCount" resultType="_long">
      <![CDATA[
         select count(*)
           from s_reply
          where board_id = #{boardId}
          and child_board_id = #{child}
          and descrim = 'post'
       ]]>
      </select>
      
      <!-- public long  getProductTotalCount(@Param("boardId") int boardId, @Param("child") int child); -->
      <select id="getProductTotalCount" resultType="_long">
      <![CDATA[
         select count(*)
           from s_reply
          where board_id = #{boardId}
          and child_board_id = #{child}
          and descrim = 'product'
       ]]>
      </select>
   
   <!-- public String getPostIdWithUserId(@Param("userId") String userId); -->
   <select id="getPostIdWithUserId" resultType="string">
      select id 
        from s_reply
       where writer_id = #{userId}
   </select>
   
   <!-- public long  getSearchTotalCount(@Param("boardId") int boardId, @Param("cri") Criteria cri); -->
   <select id="getSearchTotalCount" resultType="_long">
      select count(distinct p.id)
         from
       <include refid="searchCommon"> </include>
   </select>



	

   <!-- public List<PostVO> getList(@Param("boardId") int boardId, @Param("cri") 
      Criteria cri); -->
   <select id="getList" resultMap="rmPost">
   <![CDATA[
  select p.*,w.name w_name, w.descrim w_descrim,
  af.uuid af_uuid,
      af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
      af.multimedia_type af_multimedia_type      
     from (
           select p.*, pc.reply_cnt
           from
             (select p.id, count(r.id) reply_cnt     
                from (
                    SELECT *
                     FROM s_reply
                   where board_id = #{boardId}
                   and child_board_id = #{child}
                   order by id desc
                    OFFSET (#{cri.pageNumber} - 1) * #{cri.amount} ROWS FETCH FIRST #{cri.amount} ROWS ONLY
                ) p left outer join s_reply r
               on r.id like p.id || '%'
                  and length(r.id) > length(p.id)
          group by p.id) pc, s_reply p 
       where pc.id = p.id
        ) p left outer join sm_post_attach am on p.id = am.post_id
               left outer join s_attach_file af on am.uuid = af.uuid
               , s_party w
       where board_id = #{boardId}
         and child_board_id = #{child}
         and p.writer_id = w.user_id
       order by id desc
         
   ]]>      
   </select>
 
   <!-- public List<PostVO> getListFromLike(@Param("boardId") int boardId, @Param("child") int child, @Param("cri") Criteria cri); -->
   <select id="getListFromLike" resultMap="rmPost">
   <![CDATA[
  select p.*,w.name w_name, w.descrim w_descrim,
  af.uuid af_uuid,
      af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
      af.multimedia_type af_multimedia_type      
     from (
           select p.*, pc.reply_cnt
           from
             (select p.id, count(r.id) reply_cnt     
                from (
                    SELECT *
                     FROM s_reply
                   where board_id = #{boardId}
                   and child_board_id = #{child}
                   order by id desc
                    OFFSET (#{cri.pageNumber} - 1) * #{cri.amount} ROWS FETCH FIRST #{cri.amount} ROWS ONLY
                ) p left outer join s_reply r
               on r.id like p.id || '%'
                  and length(r.id) > length(p.id)
          group by p.id) pc, s_reply p 
       where pc.id = p.id
        ) p left outer join sm_post_attach am on p.id = am.post_id
               left outer join s_attach_file af on am.uuid = af.uuid
               , s_party w
       where board_id = #{boardId}
         and child_board_id = #{child}
         and p.writer_id = w.user_id
       order by like_cnt desc
   ]]>
   </select>
   
   <!--06.04 作 public List<PostVO> getListByHashTag(@Param("boardId") int boardId, @Param("cri") Criteria cri); -->
   <select id="getListByHashTag" resultMap="rmPost">
   select p.*, w.name w_name, w.descrim w_descrim ,
         af.uuid af_uuid,
           af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
           af.multimedia_type af_multimedia_type   <!-- 작성자 정보와 병합-->    
     from(  
          select p.*, pc.reply_cnt   <!-- 게시글의 기타 정보 조회-->
            from(
                 select p.id, count(r.id) reply_cnt   <!-- 찾은 게시글에 달린 모든 댓글 개수  -->     
                from(  
                      select p.id  <!-- 단어에서 찾은 게시글 -->
                      from<include refid="searchCommon"></include>
                         ORDER BY id DESC   
                     OFFSET  (#{cri.pageNumber} - 1) * #{cri.amount}  rows fetch first #{cri.amount} rows only
                    ) p left outer join s_reply r 
                 on r.id like p.id || '%'
                and length(r.id) > length(p.id)
               group by p.id
               ) pc, s_reply p 
            where pc.id = p.id
            ORDER BY p.id DESC   
        ) p left outer join sm_post_attach am on p.id = am.post_id
               left outer join s_attach_file af on am.uuid = af.uuid
               , s_party w
       where board_id = 3
         and child_board_id = 0
         and p.writer_id = w.user_id
     ORDER BY p.id DESC

   </select>
   
   <!--public List<PostVO> getFavorite(@Param("boardId")int boardId, @Param("curUser") Party curUser);
      TOP10 관심 사항을 바탕으로 해당 게시판에서 글 검색  -->
   
   <select id="getFavorite" resultMap="rmReply">
   
   select p.*, w.name w_name, w.descrim w_descrim
      from sm_ht2StringId mp, s_reply p, s_party w
      where mp.opponent_type = 'Post'
        and mp.hashtag_id in(
         select hashtag_id
           from sm_ht2StringId m
          where m.opponent_type = #{curUser.type}
            and m.opponent_id = #{curUser.id}
         ORDER BY occur_cnt DESC   
         OFFSET 0 ROWS FETCH FIRST 10 ROWS ONLY
           )
        and mp.opponent_id = p.id
        and p.board_id = #{boardId}
        and p.writer_id = w.user_id
   </select>

   <!-- public ReplyVO findReplyById(String id);
   게시글 상세 및 댓글 상세조회가 통합으로 서비스 되고 있습니다. -->
   <select id="findReplyById" resultMap="rmPost"> 
   <![CDATA[ 
      select p.*, w.user_id w_user_id, w.name w_name, w.descrim w_descrim, 
      af.uuid af_uuid,
      af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
      af.multimedia_type af_multimedia_type      
        from s_reply p
               left outer join sm_post_attach am on p.id = am.post_id
               left outer join s_attach_file af on am.uuid = af.uuid
               , s_party w
       where p.id = #{id}
          and p.child_board_id = #{child} 
         and p.writer_id = w.user_id
   ]]>
   </select>
   <!-- public ReplyVO findReplyByBoardId(String boardId); // 조회 -->
   <select id="findReplyByBoardId" resultMap="rmPost"> 
   <![CDATA[ 
      select p.*, w.user_id w_user_id, w.name w_name, w.descrim w_descrim, 
      af.uuid af_uuid,
      af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
      af.multimedia_type af_multimedia_type      
        from s_reply p
               left outer join sm_post_attach am on p.id = am.post_id
               left outer join s_attach_file af on am.uuid = af.uuid
               , s_party w
       where p.board_id = #{boardId}
         and p.child_board_id = #{child} 
         and p.writer_id = w.user_id
   ]]>
   </select>
   
   
   <!-- public ProductVO findProductById(@Param("productId") String id, @Param("child") int child);  -->
   <select id="findProductById" resultMap="rmPost"> 
   <![CDATA[ 
   select p.*, w.user_id w_user_id, w.name w_name, w.descrim w_descrim, 
      af.uuid af_uuid, sp.product_price sp_product_price,
      af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
      af.multimedia_type af_multimedia_type      
        from s_reply p
               left outer join sm_product_attach am on p.id = am.product_id
               left outer join s_attach_file af on am.uuid = af.uuid
               , s_party w, s_trade_product sp
       where p.id = #{productId}
          and p.child_board_id = #{child} 
         and p.writer_id = w.user_id
         and p.product_id = sp.product_id
   ]]>
   </select>
   
   <!-- +1이 된 글들은 거래완료 게시글로 이동하게 만든다. -->
   <!-- public List<PostVO> getfindSelledProdutList(@Param("boardId") int boardId, @Param("cri") Criteria cri); -->
   <select id="getfindSelledProdutList" resultMap="rmPost">
     select distinct p.*, w.name w_name, w.descrim w_descrim    
         from s_trade_product sp,(  
             select p.*, pc.reply_cnt,  pa.uuid pa_uuid, af.uuid af_uuid,
                  af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
                  af.multimedia_type af_multimedia_type
               from (
                  select p.id, count(r.id) reply_cnt
                  from(  
                       SELECT *
                         FROM s_reply re
                        where board_id = #{boardId}
                             ORDER BY id DESC
                     OFFSET  (#{cri.pageNumber} - 1) * #{cri.amount}  rows fetch first #{cri.amount} rows only
                      ) p left outer join s_reply r 
                     on r.id like p.id || '%'
                  and length(r.id) > length(p.id)
                  group by p.id) pc, s_reply p,  (select product_id, max(uuid) as uuid
                            from sm_product_attach  
                            group by product_id) pa, s_attach_file af
               where pc.id = p.id
                  and pa.product_id = p.id
                  and af.uuid = pa.uuid
               ORDER BY p.id DESC   
                ) p, s_party w
         where p.writer_id = w.user_id
         and sp.selled = 1
         and p.product_id = sp.product_id
    </select>
   
   <!-- public PostVO findProductPurchaseRepresentById(@Param("productId") String id, @Param("child") int child); -->
	<select id="findProductPurchaseRepresentById" resultMap="rmPost"> 
   <![CDATA[ 
   select p.*, w.user_id w_user_id, w.name w_name, w.descrim w_descrim, 
      af.uuid af_uuid, sp.product_price sp_product_price,
      af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
      af.multimedia_type af_multimedia_type      
        from s_reply p,  
        (select product_id, max(uuid) as uuid
           from sm_product_attach  
          group by product_id) am, s_attach_file af, s_party w, s_trade_product sp
       where p.id = #{productId}
          and p.child_board_id = #{child}
         and p.writer_id = w.user_id
         and p.product_id = sp.product_id
         and p.id = am.product_id
         and am.uuid = af.uuid
   ]]>
   </select>


   <!-- public List<PostVO> findProductList(@Param("boardId") int boardId, @Param("child") int child); -->
   <select id="findProductList" resultMap="rmPost"> 
   <![CDATA[ 
      select distinct p.*, w.name w_name, w.descrim w_descrim    
         from s_trade_product sp,(  
             select p.*, pc.reply_cnt,  pa.uuid pa_uuid, af.uuid af_uuid,
                  af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
                  af.multimedia_type af_multimedia_type
               from (
                  select p.id, count(r.id) reply_cnt
                  from(  
                       SELECT *
                         FROM s_reply re
                        where board_id = #{boardId}
                        and child_board_id = #{child}
                             ORDER BY id DESC
                     OFFSET  (#{cri.pageNumber} - 1) * #{cri.amount}  rows fetch first #{cri.amount} rows only
                      ) p left outer join s_reply r 
                     on r.id like p.id || '%'
                  and length(r.id) > length(p.id)
                  group by p.id) pc, s_reply p,  (select product_id, max(uuid) as uuid
                            from sm_product_attach  
                            group by product_id) pa, s_attach_file af
               where pc.id = p.id
                  and pa.product_id = p.id
                  and af.uuid = pa.uuid
               ORDER BY p.id DESC   
                ) p, s_party w
         where p.writer_id = w.user_id
         and sp.selled = 0
         and p.product_id = sp.product_id
   ]]>
   </select>
   
   <!-- public List<PostVO> getProductListByHashTag(@Param("boardId") int boardId, @Param("child") int child, @Param("cri") Criteria cri); -->
   <select id="getProductListByHashTag" resultMap="rmPost">
   select p.*, w.name w_name, w.descrim w_descrim     
     from(  
          select p.*, pc.reply_cnt,  pa.uuid pa_uuid, af.uuid af_uuid,
                  af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
                  af.multimedia_type af_multimedia_type
               from(
                 select p.id, count(r.id) reply_cnt       
                from(  
                      select p.id  
                      from<include refid="searchCommon"></include>
                         ORDER BY id DESC   
                     OFFSET  (#{cri.pageNumber} - 1) * #{cri.amount}  rows fetch first #{cri.amount} rows only
                    ) p left outer join s_reply r 
                 on r.id like p.id || '%'
                and length(r.id) > length(p.id)
               group by p.id
               )pc, s_reply p,  (select product_id, max(uuid) as uuid
                            from sm_product_attach  
                            group by product_id) pa, s_attach_file af
               where pc.id = p.id
                  and pa.product_id = p.id
                  and af.uuid = pa.uuid
               ORDER BY p.id DESC   
                ) p, s_party w
         where p.writer_id = w.user_id

   </select>
   
   <!-- public List<PostVO> findProductShoppingCart(@Param("boardId") String boardId, @Param("child") int child, @Param("userId") int userId); -->
   <select id="findProductShoppingCart" resultMap="rmPost"> 
   <![CDATA[ 
     select p.*, p.board_id board_id, p.child_board_id board_parent_id, w.user_id w_user_id, w.name w_name, w.descrim w_descrim, 
      af.uuid af_uuid,
      af.saved_folder_path af_saved_folder_path, af.pure_file_name af_pure_file_name,
      af.multimedia_type af_multimedia_type      
        from s_reply p, sm_product_attach am, s_attach_file af, s_party w, s_shopping_bascket sb
       where p.writer_id = w.user_id
         and p.id = am.product_id
         and am.uuid = af.uuid
         and sb.product_id = p.product_id
         and sb.user_id = #{userId}
   ]]>
   </select>
      
   <!-- public int insert(@Param("board") BoardVO board, @Param("child") int child, @Param("post") PostVO post); -->
   <!-- id는 함수의 이름, 그리고 table에 대한 insert into 구문을 만들어야한다. -->
   <!-- default = 0 은 넣어줄 필요가 없다. -->
   <insert id="insert">
      <selectKey keyProperty="post.id" order="BEFORE"
         resultType="string">
         select get_id(seq_reply_id.nextval) from dual
      </selectKey>
      insert into s_reply(id, board_id, writer_id, title, content, descrim, child_board_id)
         values(#{post.id}, #{board.id}, #{post.writer.userId}, #{post.title}, #{post.content}, #{post.DESCRIM4POST}, #{child})
   </insert>

   <!-- public int updatePost(PostVO post); -->
   <update id="updatePost">
      update s_reply
      set title = #{title},
      content = #{content},
      upt_dt = sysdate
      where id=#{id}
   </update>

   <!-- public int deleteReplyById(String id);
   특정게시글에 달린 댓글을 한꺼번에 지웁니다.
   start with connected by Query 에 비하여 성능이 높다.   -->
   <delete id="deleteReplyById">
      delete from s_reply where id like #{id} || '%'
   </delete>
   
   <!-- public String batchDeletePost(@RequestParam("postIds") ArrayList<String> postIds); -->
   <!-- Post 일괄삭제 -->
   <delete id="batchDeletePost"  >
      delete from s_reply
      <where>
         <foreach collection="postIds" item="item" index="index"  separator="or">
             id = #{item}
         </foreach>
      </where>
   </delete>
   <!-- ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆댓글 처리 함수 정의 영역 ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆-->
   
   <sql id="replyCommon"> <!-- 분할/정복 ON  -->
         FROM s_reply
         where id like #{originalId} || '%'
           and length(id) = #{idLength}
   </sql>
   
   <!--public int getAllReplyCount(@Param("replyId") String replyId, @Param("idLength") int idLength);    -->
   
         <select id="getAllReplyCount" resultType="_int">
        SELECT count(*)
        FROM s_reply
         where id like #{replyId} || '%'
           and length(id) >= #{idLength}
        
   </select>
   
   <!--public List<ReplyVO> getReplyCount(@Param("originalId") String originalId,
         @Param("idLength") int idLength);  -->
   
   <select id="getReplyCount" resultType="_int">
        SELECT count(*)
        <include refid="replyCommon"></include> 
        
   </select>      
   
   <!-- public List<PostVO> getReplyListWithPaging(@Param("originalId") String originalId,
         @Param("idLength") int idLength, @Param("cri") Criteria cri); -->
   <select id="getReplyListWithPaging" resultMap="rmReply">
   select p.*, w.name w_name, w.descrim w_descrim    
     from(
         select r.*, rc.reply_cnt
          from (select r.id, count(*) - 1 reply_cnt
            FROM s_reply r left outer join s_reply rr
               on rr.id like r.id || '%'
           where r.id in (
                   SELECT id
                   <include refid="replyCommon"></include>
                       )
         group by r.id) rc, s_reply r
          where rc.id = r.id
          order by r.id desc
             OFFSET  (#{cri.pageNumber} - 1) * #{cri.amount}  rows fetch first #{cri.amount} rows only  
       ) p, s_party w
   where p.writer_id = w.user_id
   </select>
   
   <!-- public List<ReplyVO> getReplyListOfReply(@Param("originalId")String originalId, @Param("idLength")int idLength); -->
   <select id="getReplyListOfReply" resultMap="rmReply">
   select p.*, w.name w_name, w.descrim w_descrim
      FROM (
            SELECT *
            FROM s_reply
         where id like #{originalId} || '%'
           and length(id) >= #{idLength}
               order by id
               ) p, s_party w
      where p.writer_id = w.user_id
   </select>
   <!-- reply Table에서 -->
   
   
    <!-- public int insertReply(@Param("originalId") String original,@Param("reply") ReplyVO reply); -->
   <insert id="insertReply">
      <selectKey keyProperty="reply.id" order="BEFORE" resultType="String">
         select #{originalId} || get_id(seq_reply_id.nextval) from dual
      </selectKey>
      insert into s_reply(id, writer_id, content, descrim)
         values(#{reply.id},   #{reply.writer.userId},   #{reply.content}, #{reply.DESCRIM4REPLY})
   </insert>
   
   <!-- public int updateReply(ReplyVO reply); -->
   <update id="updateReply">
      update s_reply
         set content = #{content},
             upt_dt = sysdate
       where id=#{id}
   </update>
   
</mapper>